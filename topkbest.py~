from __future__ import division
import sys
import pickle
import json
from pprint import pprint
from features import *
from training import *
import zlib
import io
from nltk import MaxentClassifier
import itertools

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def prob_deletion_1_edge(json_object, maxent_model, edge_n_m):
	context_option=1
	featureset=get_context_1_edge(json_object, edge_n_m , context_option)
	return maxent_model.prob_classify(featureset)

def prob_deletion_sentence(json_object, maxent_model)
	context_option=1
	featureset=get_context_sentence(json_object, context_option)
	return maxent_model.prob_classify_many(featuresets)

def search_children(json_object, node_n):
	children_list=[]
	edges = get_edges(json_object)
	for edge in edges:
		(parent_id, child_id, label) = get_elements_in_edge(edge)
		if parent_id==node_n:
			children.append(child_id)
	return children

def serach_highest_child_root(json_object):
	edges = get_edges(json_object)
	for edge in edges:
		(parent_id, child_id, label) = get_elements_in_edge(edge)
		if parent_id =="-1":
			children_root=search_children(json_object, parent_id)
			break
	for child in children_root:
		

#top scoring compression
	
def max_subset(json_object, maxent_model, node_n):
	children_n=search_children(json_object, node_n)
	subset_children=list(powerset(children_n))
	max_score_C_n=0
	max_subset=()
		for subset in subset_children:
			score_C_n=0
			for child in children_n:
				prob=prob_deletion_1_edge(json_object, maxent_model, (node_n, subset))
				if child not in subset:
					prob=1-prob
				score_C_n+=prob
			if max_score_C_n>score_C_n:
				max_score_C_n=score_C_n
				max_subset=subset				
	return max_subset

def top_scoring_compression(json_object, maxent_model):
	edges = get_edges(json_object)
			
		

if __name__ == "__main__":

		
